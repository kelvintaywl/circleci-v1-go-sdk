// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kelvintaywl/circleci-v1-go-sdk/models"
)

// FollowProjectReader is a Reader for the FollowProject structure.
type FollowProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FollowProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFollowProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFollowProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFollowProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFollowProjectOK creates a FollowProjectOK with default headers values
func NewFollowProjectOK() *FollowProjectOK {
	return &FollowProjectOK{}
}

/*
FollowProjectOK describes a response with status code 200, with default header values.

Project-follow information
*/
type FollowProjectOK struct {
	Payload *models.ProjectFollowInfo
}

// IsSuccess returns true when this follow project o k response has a 2xx status code
func (o *FollowProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this follow project o k response has a 3xx status code
func (o *FollowProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this follow project o k response has a 4xx status code
func (o *FollowProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this follow project o k response has a 5xx status code
func (o *FollowProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this follow project o k response a status code equal to that given
func (o *FollowProjectOK) IsCode(code int) bool {
	return code == 200
}

func (o *FollowProjectOK) Error() string {
	return fmt.Sprintf("[POST /project/{project-slug}/follow][%d] followProjectOK  %+v", 200, o.Payload)
}

func (o *FollowProjectOK) String() string {
	return fmt.Sprintf("[POST /project/{project-slug}/follow][%d] followProjectOK  %+v", 200, o.Payload)
}

func (o *FollowProjectOK) GetPayload() *models.ProjectFollowInfo {
	return o.Payload
}

func (o *FollowProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectFollowInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFollowProjectBadRequest creates a FollowProjectBadRequest with default headers values
func NewFollowProjectBadRequest() *FollowProjectBadRequest {
	return &FollowProjectBadRequest{}
}

/*
FollowProjectBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type FollowProjectBadRequest struct {
	Payload *models.Errored
}

// IsSuccess returns true when this follow project bad request response has a 2xx status code
func (o *FollowProjectBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this follow project bad request response has a 3xx status code
func (o *FollowProjectBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this follow project bad request response has a 4xx status code
func (o *FollowProjectBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this follow project bad request response has a 5xx status code
func (o *FollowProjectBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this follow project bad request response a status code equal to that given
func (o *FollowProjectBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *FollowProjectBadRequest) Error() string {
	return fmt.Sprintf("[POST /project/{project-slug}/follow][%d] followProjectBadRequest  %+v", 400, o.Payload)
}

func (o *FollowProjectBadRequest) String() string {
	return fmt.Sprintf("[POST /project/{project-slug}/follow][%d] followProjectBadRequest  %+v", 400, o.Payload)
}

func (o *FollowProjectBadRequest) GetPayload() *models.Errored {
	return o.Payload
}

func (o *FollowProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFollowProjectNotFound creates a FollowProjectNotFound with default headers values
func NewFollowProjectNotFound() *FollowProjectNotFound {
	return &FollowProjectNotFound{}
}

/*
FollowProjectNotFound describes a response with status code 404, with default header values.

Not Found
*/
type FollowProjectNotFound struct {
	Payload *models.Errored
}

// IsSuccess returns true when this follow project not found response has a 2xx status code
func (o *FollowProjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this follow project not found response has a 3xx status code
func (o *FollowProjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this follow project not found response has a 4xx status code
func (o *FollowProjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this follow project not found response has a 5xx status code
func (o *FollowProjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this follow project not found response a status code equal to that given
func (o *FollowProjectNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *FollowProjectNotFound) Error() string {
	return fmt.Sprintf("[POST /project/{project-slug}/follow][%d] followProjectNotFound  %+v", 404, o.Payload)
}

func (o *FollowProjectNotFound) String() string {
	return fmt.Sprintf("[POST /project/{project-slug}/follow][%d] followProjectNotFound  %+v", 404, o.Payload)
}

func (o *FollowProjectNotFound) GetPayload() *models.Errored {
	return o.Payload
}

func (o *FollowProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
