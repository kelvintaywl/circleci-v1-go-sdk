// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/romanyx/nullable"
)

// ProjectFollowInfo project follow info
//
// swagger:model ProjectFollowInfo
type ProjectFollowInfo struct {

	// first build
	FirstBuild nullable.String `json:"first_build,omitempty"`

	// True if you follow this project in CircleCI
	// Example: true
	Following bool `json:"following,omitempty"`

	// True if a workflow is triggered
	// Example: true
	Workflow bool `json:"workflow,omitempty"`
}

// Validate validates this project follow info
func (m *ProjectFollowInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstBuild(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectFollowInfo) validateFirstBuild(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstBuild) { // not required
		return nil
	}

	if err := m.FirstBuild.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("first_build")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("first_build")
		}
		return err
	}

	return nil
}

// ContextValidate validate this project follow info based on the context it is used
func (m *ProjectFollowInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFirstBuild(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectFollowInfo) contextValidateFirstBuild(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FirstBuild.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("first_build")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("first_build")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectFollowInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectFollowInfo) UnmarshalBinary(b []byte) error {
	var res ProjectFollowInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
